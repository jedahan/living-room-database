{"version":3,"file":"RemoteClient.min.js","sources":["../src/parse.js","../src/AbstractClient.js","../src/terms.js","../src/RemoteClient.js"],"sourcesContent":["'use strict'\n\nconst ohm = require('ohm-js')\n\nconst grammar = ohm.grammar(`\n  G {\n\n    factOrPattern\n      = term*\n\n    term\n      = id\n      | word\n      | value\n      | variable\n      | wildcard\n      | hole\n\n    id\n      = \"#\" alnum*\n\n    value\n      = keyword<\"true\">   -- true\n      | keyword<\"false\">  -- false\n      | keyword<\"null\">   -- null\n      | number\n      | string\n\n    variable\n      = \"$\" alnum+\n\n    wildcard\n      = \"$\"\n\n    hole\n      = \"_\"\n\n    word\n      = (~special any)+  -- nonspace\n      | space+           -- space\n\n    keyword<k>\n      = k ~alnum\n\n    number\n      = float (\"e\" float)?\n\n    float\n      = integer (\".\" digit+)?\n\n    integer\n      = (\"+\" | \"-\")? digit+\n\n    string\n      = \"\\\\\"\" (~\"\\\\\"\" ~\"\\\\n\" any)* \"\\\\\"\"\n\n    special\n      = id | value | variable | wildcard | hole | space\n\n  }\n`)\n\nconst semantics = grammar.createSemantics().addOperation('parse', {\n  factOrPattern (terms) {\n    return terms.parse()\n  },\n  id (_, cs) {\n    return { id: cs.sourceString }\n  },\n  value_true (_) {\n    return { value: true }\n  },\n  value_false (_) {\n    return { value: false }\n  },\n  value_null (_) {\n    return { value: null }\n  },\n  variable (_, cs) {\n    return { variable: cs.sourceString }\n  },\n  wildcard (_) {\n    return { wildcard: true }\n  },\n  hole (_) {\n    return { hole: true }\n  },\n  word_nonspace (_) {\n    return { word: this.sourceString }\n  },\n  word_space (_) {\n    return { word: ' ' }\n  },\n  number (_1, _2, _3) {\n    return { value: parseFloat(this.sourceString) }\n  },\n  string (_oq, cs, _cq) {\n    const chars = []\n    let idx = 0\n    cs = cs.parse()\n    while (idx < cs.length) {\n      let c = cs[idx++]\n      if (c === '\\\\' && idx < cs.length) {\n        c = cs[idx++]\n        switch (c) {\n          case 'n':\n            c = '\\n'\n            break\n          case 't':\n            c = '\\t'\n            break\n          default:\n            idx--\n        }\n      }\n      chars.push(c)\n    }\n    return { value: chars.join('') }\n  },\n  _terminal () {\n    return this.sourceString\n  }\n})\n\nexport default function parse (str, optRule) {\n  const rule = optRule || 'factOrPattern'\n  const matchResult = grammar.match(str.trim(), rule)\n  if (matchResult.succeeded()) {\n    return semantics(matchResult).parse()\n  } else {\n    throw new Error(`invalid ${rule}: ${str}`)\n  }\n}\n","'use strict'\n\nimport parse from './parse'\n\nconst MAX_PARSE_CACHE_SIZE = 1000\n\nexport default class AbstractClient {\n  constructor (id) {\n    this._id = id\n    this._parseCache = new Map()\n    this._asserts = []\n    this._retracts = []\n  }\n\n  assert (factString, ...fillerValues) {\n    const fact = this._toJSONFactOrPattern(factString, ...fillerValues)\n    this._asserts.push(fact)\n  }\n\n  retract (patternString, ...fillerValues) {\n    const pattern = this._toJSONFactOrPattern(patternString, ...fillerValues)\n    this._retracts.push(pattern)\n  }\n\n  async flushChanges () {\n    throw new Error('subclass responsibility')\n  }\n\n  async immediatelyAssert (factString, ...fillerValues) {\n    this.assert(factString, ...fillerValues)\n    await this.flushChanges()\n  }\n\n  async immediatelyRetract (patternString, ...fillerValues) {\n    this.retract(patternString, ...fillerValues)\n    await this.flushChanges()\n  }\n\n  async immediatelyRetractEverythingAbout (name) {\n    throw new Error('subclass responsibility')\n  }\n\n  async immediatelyRetractEverythingAssertedByMe () {\n    throw new Error('subclass responsibility')\n  }\n\n  async getAllFacts () {\n    throw new Error('subclass responsibility')\n  }\n\n  _toJSONFactOrPattern (factOrPatternString, ...fillerValues) {\n    if (arguments.length === 0) {\n      throw new Error('not enough arguments!')\n    }\n    if (typeof factOrPatternString !== 'string') {\n      throw new Error('factOrPatternString must be a string!')\n    }\n    let terms = this._parse(factOrPatternString)\n    if (fillerValues.length > 0) {\n      terms = terms.slice()\n    }\n    for (let idx = 0; idx < terms.length; idx++) {\n      const term = terms[idx]\n      if (term.hasOwnProperty('hole')) {\n        if (fillerValues.length === 0) {\n          throw new Error('not enough filler values!')\n        }\n        terms[idx] = this._toJSONTerm(fillerValues.shift())\n      }\n    }\n    if (fillerValues.length > 0) {\n      throw new Error('too many filler values!')\n    }\n    return terms\n  }\n\n  _toJSONTerm (value) {\n    return { value: value }\n  }\n\n  _parse (factOrPatternString) {\n    if (this._parseCache.has(factOrPatternString)) {\n      return this._parseCache.get(factOrPatternString)\n    } else {\n      this._clearParseCacheIfTooBig()\n      const terms = parse(factOrPatternString)\n      this._parseCache.set(factOrPatternString, terms)\n      return terms\n    }\n  }\n\n  _clearParseCacheIfTooBig () {\n    if (this._parseCache.size > MAX_PARSE_CACHE_SIZE) {\n      this.clearParseCache()\n    }\n  }\n\n  clearParseCache () {\n    this._parseCache.clear()\n  }\n}\n","'use strict'\n\nclass Term {\n  toString () {\n    throw new Error('subclass responsibility')\n  }\n\n  toJSON () {\n    throw new Error('subclass responsibility')\n  }\n\n  toRawValue () {\n    throw new Error('subclass responsibility')\n  }\n\n  match (that, env) {\n    throw new Error('subclass responsibility')\n  }\n}\n\nTerm.fromJSON = json => {\n  if (json.hasOwnProperty('id')) {\n    return new Id(json.id)\n  } else if (json.hasOwnProperty('word')) {\n    return new Word(json.word)\n  } else if (json.hasOwnProperty('value')) {\n    return new Value(json.value)\n  } else if (json.hasOwnProperty('blobRef')) {\n    return new BlobRef(json.blobRef)\n  } else if (json.hasOwnProperty('variable')) {\n    return new Variable(json.variable)\n  } else if (json.hasOwnProperty('wildcard')) {\n    return new Wildcard()\n  } else if (json.hasOwnProperty('hole')) {\n    return new Hole()\n  } else {\n    throw new Error('unrecognized JSON term: ' + JSON.stringify(json))\n  }\n}\n\nclass Id extends Term {\n  constructor (name) {\n    super()\n    this.name = name\n  }\n\n  toString () {\n    return '#' + this.name\n  }\n\n  toJSON () {\n    return { id: this.name }\n  }\n\n  toRawValue () {\n    return this\n  }\n\n  match (that, env) {\n    return that instanceof Id && this.name === that.name ? env : null\n  }\n}\n\nclass Word extends Term {\n  constructor (value) {\n    super()\n    this.value = value\n  }\n\n  toString () {\n    return this.value\n  }\n\n  toJSON () {\n    return { word: this.value }\n  }\n\n  toRawValue () {\n    return this\n  }\n\n  match (that, env) {\n    return that instanceof Word && this.value === that.value ? env : null\n  }\n}\n\nclass Value extends Term {\n  constructor (value) {\n    super()\n    this.value = value\n  }\n\n  toString () {\n    return JSON.stringify(this.value)\n  }\n\n  toJSON () {\n    return { value: this.value }\n  }\n\n  toRawValue () {\n    return this.value\n  }\n\n  match (that, env) {\n    return that instanceof Value && this.value === that.value ? env : null\n  }\n}\n\nclass BlobRef extends Term {\n  constructor (id) {\n    super()\n    this.id = id\n  }\n\n  toString () {\n    return '@' + this.id\n  }\n\n  toJSON () {\n    return { blobRef: this.id }\n  }\n\n  toRawValue () {\n    return this\n  }\n\n  match (that, env) {\n    return that instanceof BlobRef && this.id === that.id ? env : null\n  }\n}\n\nclass Variable extends Term {\n  constructor (name) {\n    super()\n    this.name = name\n  }\n\n  toString () {\n    return '$' + this.name\n  }\n\n  toJSON () {\n    return { variable: this.name }\n  }\n\n  toRawValue () {\n    throw new Error(\"Variable's toRawValue() should never be called!\")\n  }\n\n  match (that, env) {\n    if (env[this.name] === undefined) {\n      env[this.name] = that\n      return env\n    } else {\n      return env[this.name].match(that, env)\n    }\n  }\n}\n\nclass Wildcard extends Term {\n  constructor () {\n    super()\n    // no-op\n  }\n\n  toString () {\n    return '$'\n  }\n\n  toJSON () {\n    return { wildcard: true }\n  }\n\n  toRawValue () {\n    throw new Error(\"Wildcard's toRawValue() should never be called!\")\n  }\n\n  match (that, env) {\n    return env\n  }\n}\n\nclass Hole extends Term {\n  constructor () {\n    super()\n    // no-op\n  }\n\n  toString () {\n    return '_'\n  }\n\n  toJSON () {\n    return { hole: true }\n  }\n\n  toRawValue () {\n    throw new Error(\"Hole's toRawValue() should never be called!\")\n  }\n\n  match (that, env) {\n    throw new Error(\"Hole's match() should never be called!\")\n  }\n}\n\nexport { Term, Id, Word, Value, BlobRef, Variable, Wildcard, Hole }\n","'use strict'\n\nimport AbstractClient from './AbstractClient'\nimport { Term } from './terms'\nimport parse from './parse'\n\n// If fetch is not declared, load it from the node-fetch module.\n// (This makes it possible to run RemoteClient in the browser and in node-js.)\nconst fetch = (() => {\n  try {\n    return fetch\n  } catch (e) {\n    return require('node-fetch')\n  }\n})()\n\nexport default class RemoteClient extends AbstractClient {\n  constructor (address, port, id) {\n    super(id)\n    this._address = address\n    this._port = port\n  }\n\n  select (...patternStrings) {\n    const patterns = patternStrings.map(\n      p =>\n        p instanceof Array\n          ? this._toJSONFactOrPattern(...p)\n          : this._toJSONFactOrPattern(p)\n    )\n    const solutions = async () => {\n      const params = `query=${JSON.stringify(patterns)}`\n      const response = await fetch(\n        `http://${this._address}:${this._port}/facts?${params}`\n      )\n      return await response.json()\n    }\n    const results = {\n      async do (callbackFn) {\n        for (let solution of await solutions()) {\n          for (let name in solution) {\n            // force serialization and deserialization to simulate going over the network\n            const json = JSON.parse(JSON.stringify(solution[name]))\n            solution[name] = Term.fromJSON(json).toRawValue()\n          }\n          await callbackFn(solution)\n        }\n        return results\n      },\n      async count () {\n        return (await solutions()).length\n      },\n      async isEmpty () {\n        return (await solutions()).length === 0\n      },\n      async isNotEmpty () {\n        return (await solutions()).length > 0\n      }\n    }\n    return results\n  }\n\n  async flushChanges () {\n    const retractions = this._retracts\n    const assertions = this._asserts\n    this._retracts = []\n    this._asserts = []\n    const params =\n      'clientId=' +\n      this._id +\n      '&' +\n      'retractions=' +\n      JSON.stringify(retractions) +\n      '&' +\n      'assertions=' +\n      JSON.stringify(assertions)\n    const response = await fetch(\n      `http://${this._address}:${this._port}/facts?${params}`,\n      { method: 'PUT' }\n    )\n    return await response.json()\n  }\n\n  async immediatelyRetractEverythingAbout (name) {\n    const response = await fetch(\n      `http://${this._address}:${this._port}/facts?clientId=${\n        this._id\n      }&name=${name}`,\n      { method: 'DELETE' }\n    )\n    return await response.json()\n  }\n\n  async immediatelyRetractEverythingAssertedByMe () {\n    const response = await fetch(\n      `http://${this._address}:${this._port}/facts?clientId=${this._id}`,\n      { method: 'DELETE' }\n    )\n    return await response.json()\n  }\n\n  async getAllFacts () {\n    const response = await fetch(`http://${this._address}:${this._port}/facts`)\n    return await response.json()\n  }\n\n  toString () {\n    return `[RemoteClient ${this._address}:${this._port}, ${this._id}]`\n  }\n}\n\nmodule.exports = RemoteClient\n"],"names":["grammar","require","semantics","createSemantics","addOperation","factOrPattern","terms","parse","id","_","cs","sourceString","value_true","value","value_false","value_null","variable","wildcard","hole","[object Object]","word","this","word_space","_1","_2","_3","parseFloat","_oq","_cq","chars","idx","length","c","push","join","MAX_PARSE_CACHE_SIZE","AbstractClient","_id","_parseCache","Map","_asserts","_retracts","factString","fillerValues","fact","_toJSONFactOrPattern","patternString","pattern","Error","assert","flushChanges","retract","name","factOrPatternString","arguments","_parse","slice","hasOwnProperty","_toJSONTerm","shift","has","get","_clearParseCacheIfTooBig","str","optRule","rule","matchResult","match","trim","succeeded","set","size","clearParseCache","clear","Term","that","env","fromJSON","json","Id","Word","Value","BlobRef","blobRef","super","undefined","JSON","stringify","fetch","e","RemoteClient","address","port","_address","_port","patternStrings","patterns","map","p","Array","solutions","async","params","response","results","callbackFn","solution","toRawValue","count","isEmpty","isNotEmpty","retractions","assertions","method","module","exports"],"mappings":"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"}